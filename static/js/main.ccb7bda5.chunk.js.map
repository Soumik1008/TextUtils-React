{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutext","placeholder","onClick","toggleMode","htmlFor","TextForm","useState","text","setext","style","color","heading","backgroundColor","value","onChange","event","target","rows","newtext","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","trim","Alert","alert","role","word","lower","charAt","slice","Capitalise","msg","defaultProps","App","setmode","setalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ccb7bda5.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutext}</Link> */}\r\n                                <a className=\"nav-link\" href=\"#\">{props.aboutext}</a>\r\n                            </li>\r\n                        </ul>\r\n                        <form className=\"d-flex mx-2\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form>\r\n                        <div className={`form-check form-switch text-${props.mode === 'warning' ? 'dark' : 'light'}`}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n                            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutext: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'TextUtils',\r\n    aboutext: 'About'\r\n};\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setext] = useState('')\r\n    const handleUpClick = () => {\r\n        // console.log(\"Changed To uppercase\", text);\r\n        let newtext = text.toUpperCase();\r\n        setext(newtext);\r\n        props.showAlert(\"Converted to UpperCase\", \"success\")\r\n    }\r\n\r\n    const handlelowClick = () => {\r\n        // console.log(\"Changed To uppercase\", text);\r\n        let newtext = text.toLowerCase();\r\n        setext(newtext);\r\n        props.showAlert(\"Converted to LowerCase\", \"success\")\r\n    }\r\n\r\n    const handleClear = () => {\r\n        let newtext = '';\r\n        setext(newtext);\r\n        props.showAlert(\"Cleared Everything\", \"success\")\r\n    }\r\n\r\n    const handlespaces = () => {\r\n        let newtext = text.split(/[ ]+/);\r\n        setext(newtext.join(\" \"))\r\n        props.showAlert(\"Handle Spaces\", \"success\")\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText = text;\r\n        props.showAlert(\"Copied to clipboard\", \"success\")\r\n    }\r\n    // const capitalize = () =>{\r\n    //     let CapitalizeWords = text[0].toUpperCase();  \r\n    //     for (let i = 1; i <= text.length - 1; i++) {  \r\n    //         let currentCharacter,  previousCharacter = text[i - 1];  \r\n    //         if ( previousCharacter && previousCharacter === ' ') {  \r\n    //             currentCharacter = text[i].toUpperCase();  \r\n    //         } else {  \r\n    //             currentCharacter = text[i];  \r\n    //         }  \r\n    //         CapitalizeWords = CapitalizeWords + currentCharacter;  \r\n    //     }  \r\n    //     setext(CapitalizeWords);\r\n    // }\r\n    const handleonChange = (event) => {\r\n        // console.log(\"OnChange function running\");\r\n        setext(event.target.value);\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h1 style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} value={text} onChange={handleonChange} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-info mx-3\" onClick={handleUpClick}>Convert To UpperCase</button>\r\n                <button className=\"btn btn-success mx-3\" onClick={handlelowClick}>Convert To LowerCase</button>\r\n                <button className=\"btn btn-secondary mx-3\" onClick={handleClear}>Clear Text</button>\r\n                <button className=\"btn btn-primary mx-3\" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-danger mx-3\" onClick={handlespaces}>Space Handle</button>\r\n                {/* <button className=\"btn btn-danger mx-3\" onClick={capitalize}>Capitalise</button> */}\r\n            </div>\r\n            <div className=\"container my-4\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                <h2>Your Text Summary here</h2>\r\n                <p>\r\n                    {text.length === 0 ? 0 : text.trim().split(\" \").length}words & {text.length}characters</p>\r\n                <p>\r\n                    <b>{(text.length === 0 ? 0 : text.trim().split(\" \").length) * 0.008}minutes taken</b>\r\n                </p>\r\n                <h2>Preview:</h2>\r\n                <p>\r\n                    {text.length > 0 ? text : \"Enter something to preview\"}\r\n                </p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const Capitalise=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{Capitalise(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('warning')\n  const [alert, setalert] = useState(null)\n\n  const toggleMode = () => {\n    if (mode === 'dark') {\n      setmode('warning');\n      document.body.style.backgroundColor = 'white'\n      showAlert('Light Mode has been enabled', \"success\")\n      document.title = \"Text Home-Light Mode Enabled\"\n    }\n    else {\n      setmode('dark');\n      document.body.style.backgroundColor = '#203559'\n      showAlert('DarkMode has been enabled', \"success\")\n      document.title = \"Text Home-Dark Mode Enabled\"\n    }\n  }\n\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null)\n    }, 3000);\n  }\n  return (\n    <>\n      {/* <Navbar title='TextUtils' abtext=\"About Us\" /> */}\n      {/* <Router> */}\n      <Navbar title='TextUtils' mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/\"> */}\n              <TextForm showAlert={showAlert} heading=\"Enter texts to analyse below Analyse\" mode={mode} />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}